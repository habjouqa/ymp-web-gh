{"version":3,"file":"static/js/817.3e76bf48.chunk.js","mappings":"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","sources":["client/components/patients/treatments-summary/TreatmentsWithPreferenceSummary.jsx","client/components/patients/treatments-summary/TreatmentsSimpleSummary.jsx","client/Pages/TreatmentSummaryPage.js"],"sourcesContent":["import React, { useContext, useState } from \"react\";\r\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\r\nimport AppointmentService from \"../../../services/appointment.services\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport AppContext from \"store/app-store\";\r\n\r\nfunction TreatmentsWithPreferenceSummary() {\r\n  const { getLang } = useContext(AppContext);\r\n  const [t, i18next] = useTranslation();\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const [isActionLoading, setIsActionLoading] = useState(false);\r\n  const [message, setMessage] = useState();\r\n  const treatmentSummary = location?.state.values;\r\n  console.log(\r\n    \"ðŸš€ ~ file: index.jsx ~ line 13 ~ TreatmentsSummary ~ treatmentSummary\",\r\n    treatmentSummary\r\n  );\r\n\r\n  const appointmentAction = async (treatmentSummary) => {\r\n    console.log(\r\n      `appointmentAction - treatmentSummary : ${JSON.stringify(\r\n        treatmentSummary\r\n      )}`\r\n    );\r\n    setIsActionLoading(true);\r\n    let requestData = new FormData();\r\n\r\n    const request = {\r\n      userId: treatmentSummary.userId,\r\n      status: \"pending\",\r\n      treatmentId: treatmentSummary?.treatment,\r\n      travelPreferences: JSON.stringify(treatmentSummary.questions),\r\n      lang: getLang(),\r\n    };\r\n    requestData.append(\"request\", JSON.stringify(request, 0, 2));\r\n    const response = await AppointmentService.createAppointmentWithoutFiles(\r\n      requestData\r\n    );\r\n    setIsActionLoading(false);\r\n    setMessage(!!response.message && response.message);\r\n    if (!!!response.success && !response.success) return;\r\n\r\n    navigate(\"/\" + getLang() + \"/treatment-success\", {\r\n      state: { appointmentId: response?.body.id },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"content success-page-cont\">\r\n        <div className=\"container-fluid\">\r\n          <div className=\"row justify-content-center\">\r\n            <div className=\"col-lg-6\">\r\n              <div className=\"card\">\r\n                <div className=\"d-flex flex-row justify-content-end mx-3 mt-3\">\r\n                  <Link\r\n                    to=\"/treatments-preference\"\r\n                    className=\"btn btn-primary bd-highlight\"\r\n                  >\r\n                    <i className=\"fas  fa-arrow-left\"></i>{\" \"}\r\n                    {t(\"BackToTreatment\")}\r\n                  </Link>\r\n                </div>\r\n                <h3 className=\"p-2 bd-highlight text-center\">\r\n                  {t(\"Treatment.ReviewTreatment\")}\r\n                </h3>\r\n                {message && (\r\n                  <div\r\n                    className=\"invalid-feedback d-block mb-2\"\r\n                    style={{\r\n                      margin:\r\n                        i18next.language === \"en\"\r\n                          ? \"10px 0 0 15px\"\r\n                          : \"10px 15px 0 0\",\r\n                    }}\r\n                  >\r\n                    {message}\r\n                  </div>\r\n                )}\r\n\r\n                <div className=\"card-body d-flex justify-content-center\">\r\n                  <ul className=\"list-group\" style={{ width: \"40rem\" }}>\r\n                    {\" \"}\r\n                    <h4 className=\"mt-n4\" style={{ textAlign: \"start\" }}>\r\n                      {t(\"Treatment.Treatment\")}\r\n                    </h4>\r\n                    <li className=\"list-group-item d-flex justify-content-between align-items-center py-1\">\r\n                      <div className=\"col-12\">\r\n                        {\" \"}\r\n                        {i18next.language === \"ar\"\r\n                          ? treatmentSummary?.treatmentName_ar\r\n                          : treatmentSummary?.treatmentName}\r\n                      </div>\r\n                    </li>\r\n                  </ul>\r\n                </div>\r\n                <div className=\"card-body d-flex justify-content-center\">\r\n                  <ul className=\"list-group\" style={{ width: \"40rem\" }}>\r\n                    {\" \"}\r\n                    <h4 className=\"mt-n4\" style={{ textAlign: \"start\" }}>\r\n                      {t(\"Preference.Questions\")}\r\n                    </h4>\r\n                    {treatmentSummary?.questions?.map((q, i) => {\r\n                      return (\r\n                        <li\r\n                          key={i}\r\n                          className=\"list-group-item d-flex justify-content-between align-items-center py-1\"\r\n                        >\r\n                          <div className=\"col-9\"> {q.question}</div>\r\n                          <div className=\"col-3\">\r\n                            {q.selected === true ? \"Yes\" : \"No\"}\r\n                          </div>\r\n                        </li>\r\n                      );\r\n                    })}\r\n                  </ul>\r\n                </div>\r\n\r\n                <div className=\"card-body d-flex justify-content-center\">\r\n                  <p className=\"card-text\">\r\n                    <button\r\n                      to=\"/treatment-success\"\r\n                      className=\"btn btn-primary\"\r\n                      onClick={(e) => appointmentAction(treatmentSummary)}\r\n                      disabled={isActionLoading}\r\n                    >\r\n                      {t(\"Confirm\")}\r\n                      {isActionLoading && (\r\n                        <span className=\"spinner-border spinner-border-sm mb-1 mx-1\"></span>\r\n                      )}\r\n                    </button>\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TreatmentsWithPreferenceSummary;\r\n","import { AppointmentService, TreatmentService } from \"client/services\";\r\nimport { preferenceOptions_en, preferenceOptions_ar } from \"common\";\r\nimport { useCallback, useContext, useEffect, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport AppContext from \"store/app-store\";\r\nimport TreatmentsContext from \"store/treatments-store\";\r\n\r\nfunction TreatmentsSimpleSummary() {\r\n  const { getLang } = useContext(AppContext);\r\n  const { data } = useContext(TreatmentsContext);\r\n  const [t, i18next] = useTranslation();\r\n  const navigate = useNavigate();\r\n  const [isActionLoading, setIsActionLoading] = useState(false);\r\n  const [treatmentsData, setTreatmentsData] = useState();\r\n  const [message, setMessage] = useState();\r\n  const [summary, setSummary] = useState(null);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const treatmentServiceResponse =\r\n        await TreatmentService.getAllTreatments();\r\n      setMessage(\r\n        !!treatmentServiceResponse?.message && treatmentServiceResponse?.message\r\n      );\r\n      if (treatmentServiceResponse.success) {\r\n        setTreatmentsData(\r\n          treatmentServiceResponse.body\r\n            ?.filter((t) => t.active === true)\r\n            ?.map((s) => {\r\n              return { ...s, isActive: s.isActive };\r\n            })\r\n        );\r\n      }\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (data && data.treatment) {\r\n      setSummary({\r\n        treatment: treatmentsData?.find(\r\n          (t) => \"\" + t.id === \"\" + data?.treatment\r\n        ),\r\n        preferences: (i18next.language === \"ar\"\r\n          ? preferenceOptions_ar\r\n          : preferenceOptions_en\r\n        ).map((prefOption) => ({\r\n          ...prefOption,\r\n          selected: data?.preferences[prefOption[\"id\"]],\r\n        })),\r\n        email: data?.email,\r\n        userId: data?.userId,\r\n      });\r\n    } else {\r\n      navigate(`/${getLang()}/treatments`);\r\n    }\r\n  }, [navigate, treatmentsData, data]);\r\n\r\n  const getBackToTreatmentsBtn = useCallback(\r\n    (lang) => {\r\n      const arrowClass = `fas ${\r\n        lang === \"ar\" ? \"fa-arrow-right\" : \"fa-arrow-left\"\r\n      }`;\r\n\r\n      return (\r\n        <Link\r\n          to={`/${lang}/treatments`}\r\n          className=\"btn btn-primary bd-highlight\"\r\n        >\r\n          <i className={arrowClass}></i> {t(\"Treatment.BackToTreatment\")}\r\n        </Link>\r\n      );\r\n    },\r\n    [t]\r\n  );\r\n\r\n  const submitAppointment = async (formData) => {\r\n    summary?.preferences?.map((q, i) => {\r\n      q.selected === true ? console.log(q.title) : console.log(\"q.title\");\r\n    });\r\n    const treatmentParam =\r\n      getLang() === \"ar\"\r\n        ? summary?.treatment?.name_ar\r\n        : summary?.treatment?.name;\r\n    const preferencesParams = summary?.preferences\r\n      ?.filter((i) => i.selected === true)\r\n      .map((q) => q.title);\r\n\r\n    setIsActionLoading(true);\r\n    let requestData = new FormData();\r\n\r\n    const request = {\r\n      status: \"pending\",\r\n      userId: formData?.userId,\r\n      treatmentId: formData?.treatment?.id,\r\n      travelPreferences: JSON.stringify(\r\n        formData?.preferences.reduce(function (m, v) {\r\n          m[v.id] = v.selected;\r\n          return m;\r\n        }, {})\r\n      ),\r\n      treatmentParam: treatmentParam,\r\n      preferencesParams: JSON.stringify(preferencesParams),\r\n      lang: getLang(),\r\n      // travelPreferences: JSON.stringify(Object.fromEntries(formData?.preferences.map(p => JSON.stringify([p?.id, p?.selected]))))\r\n    };\r\n\r\n    requestData.append(\"request\", JSON.stringify(request, 0, 2));\r\n    const response = await AppointmentService.createAppointmentWithoutFiles(\r\n      requestData\r\n    );\r\n    setIsActionLoading(false);\r\n\r\n    setMessage(!!response.message && response.message);\r\n    if (!!!response.success && !response.success) return;\r\n\r\n    navigate(`/${getLang()}/treatment-success`, {\r\n      state: { appointmentId: response?.body.id },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"content success-page-cont\">\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row justify-content-center\">\r\n          <div className=\"col-lg-6\">\r\n            <div className=\"card\">\r\n              <div className=\"d-flex flex-row justify-content-end mx-3 mt-3\">\r\n                {getBackToTreatmentsBtn(getLang())}\r\n              </div>\r\n              <h3 className=\"p-2 bd-highlight text-center\">\r\n                {t(\"Treatment.ReviewTreatment\")}\r\n              </h3>\r\n              {message && (\r\n                <div\r\n                  className=\"invalid-feedback d-block mb-2\"\r\n                  style={{\r\n                    margin:\r\n                      i18next.language === \"en\"\r\n                        ? \"10px 0 0 15px\"\r\n                        : \"10px 15px 0 0\",\r\n                  }}\r\n                >\r\n                  {message}\r\n                </div>\r\n              )}\r\n\r\n              {summary && (\r\n                <section>\r\n                  <div className=\"card-body d-flex justify-content-center\">\r\n                    <ul className=\"list-group\" style={{ width: \"40rem\" }}>\r\n                      {\" \"}\r\n                      <h4 className=\"mt-n4\" style={{ textAlign: \"start\" }}>\r\n                        {t(\"Treatment.Treatment\")}\r\n                      </h4>\r\n                      <li className=\"list-group-item d-flex justify-content-between align-items-center py-1\">\r\n                        <div className=\"col-12\">\r\n                          {\" \"}\r\n                          {i18next.language === \"ar\"\r\n                            ? summary?.treatment?.name_ar\r\n                            : summary?.treatment?.name}\r\n                        </div>\r\n                      </li>\r\n                    </ul>\r\n                  </div>\r\n                  <div className=\"card-body d-flex justify-content-center\">\r\n                    <ul className=\"list-group\" style={{ width: \"40rem\" }}>\r\n                      {\" \"}\r\n                      <h4 className=\"mt-n4\" style={{ textAlign: \"start\" }}>\r\n                        {t(\"Preference.Questions\")}\r\n                      </h4>\r\n                      {summary?.preferences?.map((q, i) => {\r\n                        return (\r\n                          <li\r\n                            key={i}\r\n                            className=\"list-group-item d-flex justify-content-between align-items-center py-1\"\r\n                          >\r\n                            <div className=\"col-9\"> {q.title}</div>\r\n                            <div className=\"col-3\">\r\n                              {q.selected === true ? t(\"Yes\") : t(\"No\")}\r\n                            </div>\r\n                          </li>\r\n                        );\r\n                      })}\r\n                    </ul>\r\n                  </div>\r\n\r\n                  <div className=\"card-body d-flex justify-content-center\">\r\n                    <p className=\"card-text\">\r\n                      <button\r\n                        to=\"/treatment-success\"\r\n                        className=\"btn btn-primary\"\r\n                        onClick={() => submitAppointment(summary)}\r\n                        disabled={isActionLoading}\r\n                      >\r\n                        {t(\"Confirm\")}\r\n                        {isActionLoading && (\r\n                          <span className=\"spinner-border spinner-border-sm mb-1 mx-1\"></span>\r\n                        )}\r\n                      </button>\r\n                    </p>\r\n                  </div>\r\n                </section>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TreatmentsSimpleSummary;\r\n","import React from \"react\";\r\n// import TreatmentsSummary from \"../components/patients/treatments-summary\";\r\n// import TreatmentsWithPreferenceSummary from \"../components/patients/treatments-summary/TreatmentsWithPreferenceSummary\";\r\nimport { TreatmentsSimpleSummary } from \"client/components/patients/treatments-summary\";\r\n\r\nfunction TreatmentSummaryPage() {\r\n  return (\r\n    <TreatmentsSimpleSummary />\r\n  )\r\n}\r\n\r\nexport default TreatmentSummaryPage;"],"names":["getLang","useContext","AppContext","data","TreatmentsContext","useTranslation","t","i18next","navigate","useNavigate","useState","isActionLoading","setIsActionLoading","treatmentsData","setTreatmentsData","message","setMessage","summary","setSummary","useEffect","TreatmentService","treatmentServiceResponse","success","body","filter","active","map","s","isActive","fetchData","treatment","find","id","preferences","language","preferenceOptions_ar","preferenceOptions_en","prefOption","selected","email","userId","getBackToTreatmentsBtn","useCallback","lang","arrowClass","to","className","submitAppointment","formData","q","i","console","log","title","treatmentParam","name_ar","name","preferencesParams","requestData","FormData","request","status","treatmentId","travelPreferences","JSON","stringify","reduce","m","v","append","AppointmentService","response","state","appointmentId","style","margin","width","textAlign","onClick","disabled"],"sourceRoot":""}